package pack1;
/* 1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ? */
class Parent 
{
	int num1=10;
	void disp()
	{
		System.out.println(num1);
	}
	Parent()
	{
		System.out.println("in parent class");
	}
}
class Child extends Parent
{
	int num2=20;
	void disp2()
	{
		System.out.println(num2);
	}
	Child()
	{
		System.out.println("in Child class");
	}
}
class Child1 extends Child
{
	int num3=30;
	void disp3()
	{
		System.out.println(num3);
	}
	Child1()
	{
		System.out.println("in Child1 class");
	}
	Child1(int num3)
	{
		System.out.println("in Child1 class paramererized");
	}
}
public class Inheritance_Demo 
{
	public static void main(String[] args)
	{
		Child1 ch = new Child1(30);
		ch.disp3();
		ch.disp2();
		ch.disp();

	}
}

output:
        in parent class
	in Child class
	in Child1 class paramererized
	30
	20
	10


package pack1;
/* 2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ? */

class Vehicle
{
	public void start()
	{
		System.out.println("in vehicle class");
	}
}
class FourWheeler extends Vehicle
{
	public void start()
	{
		System.out.println("in FourWheeler class");
	}
}
public class Inheritance_demo2 
{
	public static void main(String[] args)
	{
	    FourWheeler f = new FourWheeler();
		f.start();
//		Vehicle v = new Vehicle();
//		v.start();
	}

}

output:
	in FourWheeler class


package pack1;
/* 3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation. */

class Parent1 
{
	int num1=10;
	void disp()
	{
		System.out.println(num1);
	}
	Parent1()
	{
		System.out.println("no-arg in parent class");
	}
}
class Child3 extends Parent1
{
	int num2=20;
	void disp2()
	{
		System.out.println(num2);
	}
	Child3()
	{
		System.out.println(" no-arg in Child3 class");
	}
}
class Child2 extends Parent1
{
	int num3=30;
	void disp3()
	{
		System.out.println(num3);
	}
	Child2()
	{
		System.out.println("no-arg in Child2 class");
	}
	Child2(int num3)
	{
		System.out.println("in Child2 class paramererized");
	}
}
public class Hirarchical 
{

	public static void main(String[] args)
	{
		Child2 ch = new Child2();
		ch.disp();
		ch.disp3();
	}
}

output:
	no-arg in parent class
	no-arg in Child2 class
	10
	30

package pack1;
/* 4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism. */

class Top1
{
	void disp1()
	{
		System.out.println("in Top1");
	}
}
class Bottom1 extends Top1
{
	void disp1()
	{
		System.out.println("in Bottom1");
	}
}
class Bottom2 extends Top1
{
	void disp1()
	{
		System.out.println("in Bottom2");
	}
}
class Bottom3 extends Top1
{
	void disp1()
	{
		System.out.println("in Bottom3");
	}
}
public class Top  
{
	public static void main(String[] args) 
	{
		Top1 t = new Bottom1();
		t.disp1();
	}
}

output:
	in Bottom1


package pack1;
/* 5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function. */

abstract class Shape
{
	abstract void Draw();
}
class Triangle extends Shape
{
	void Draw()
	{
		System.out.println("Drawing Triangle");
	}
}
class Polygon extends Shape
{
	void Draw()
	{
		System.out.println("Drawing Polygon");
	}
}
class Circle extends Shape
{
	void Draw()
	{
		System.out.println("Drawing Circle");
	}
}

public class Abstract
{
	public static void main(String[] args) 
	{
		Shape arr[]= new Shape[3];
		arr[0] = new Triangle();
		arr[1] = new Polygon();
		arr[2] = new Circle();
	
	for(int i=0;i<arr.length;i++)
	{
		arr[i].Draw();
	}
	}
}

output:
	Drawing Triangle
	Drawing Polygon
	Drawing Circle

package pack1;
/* 6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.
 */

interface AA
{
	void disp1();
}
interface BB extends AA
{
	void disp2();
}
class C implements BB
{

	@Override
	public void disp1() 
	{
		System.out.println("in disp1");
	}

	@Override
	public void disp2() 
	{
		System.out.println("in disp2");
	}
}
public class Interface_Demo 
{
	public static void main(String[] args) 
	{
        C c = new C();
        c.disp1();
        c.disp2();
	}
}

output:
	in disp1
	in disp2

package pack1;
/* 7) Define class "Parent7" with some data.
Define interface "Parent8" with some data.
Derive a class "Child" from "Parent7" and "Parent8", instantiate it and call the members. */

class Parent7
{
	int num=100;
	void disp()
	{
		System.out.println(num);
	}
}
interface Parent8
{
	void show();
}
class Child7 extends Parent7 implements Parent8
{

	@Override
	public void show() 
	{
	   System.out.println("showing in child7 ");
	}
	
}
public class Inheritance_7 
{

	public static void main(String[] args) 
	{
		Child7 ch = new Child7();
		ch.disp();
		ch.show();
	}
}

output:
	100
	showing in child7 

package pack1;
/* 8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors. */

class Base1
{
	int num = 100;
    void show()
    {
    	System.out.println(num);
    }
    Base1(int k)
    {
    	System.out.println("parameterized in Base1");
    }
}
class Sub1 extends Base1
{
	int num1=500;
	void show1()
    {
    	System.out.println(num1);
    }
	Sub1()
    {
		super(100);
    	System.out.println("no-arg in Sub1");
    }
	Sub1(int k)
    {
		super(100);
    	System.out.println("One parameter in Sub1");
    }
	Sub1(int k ,int l)
    {
		super(100);
    	System.out.println("Two parameter in Sub1");
    }
}
public class Constructor_8 
{
	public static void main(String[] args)
	{
		Sub1 s = new Sub1(100,200);
		s.show();
		s.show1();
	}
}

output:
	parameterized in Base1
	Two parameter in Sub1
	100
	500


package pack1;
/* 9) create interface "Game" , have an abstract method "play()". from this interface implements classes 
      like "Cricket" , "FootBall" and "Tennis".Now Define one more class public class Demo with main function.In this class have a 
      static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object 
      passed ,its "play()" method should be invoked. Call "perform()" method from main function. */

interface Game
{
  abstract void play();	
}
class Cricket implements Game
{

	@Override
	public void play() 
	{
		System.out.println("Playing Cricket ");
	}
}
class FootBall implements Game
{

	@Override
	public void play() 
	{
		System.out.println("Playing FootBall ");
	}
}
class Tennis implements Game
{

	@Override
	public void play()
	{
		System.out.println("Playing Tennis ");
	}
}
public class Interface_Game 
{ 
	static void perform(Game g)
	{
		g.play();
	}
	public static void main(String[] args) 
	{
		perform(new Cricket());
		perform(new FootBall());
		perform(new Tennis());
	}
}

output:
	Playing Cricket 
	Playing FootBall 
	Playing Tennis 

